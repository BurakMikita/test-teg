{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","todos","setTodos","todosTwo","prevTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","length","jsonSapros","stringify","setItem","searchSubmit","e","preventDefault","updatedTodos","filter","teg","spanSearch","target","innerText","id","style","marginRight","onClick","type","onChange","value","slovo","split","indexOf","join","newTodo","Date","getTime","text","concat","marginLeft","map","className","completed","toggleComplete","submitEdits","deleteTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9eb313ee.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\nimport \"./App.css\";\nimport  jsonSapros from './tegi.json'\n\nconst App = () => {\n  const [todos, setTodos] = React.useState([]);\n  const [todosTwo, prevTodos] = React.useState([]);\n  const [todo, setTodo] = React.useState(\"\");\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n\n  React.useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos.length) {\n      setTodos(loadedTodos);\n    }\n    else {\n      setTodos(jsonSapros)\n    }\n\n  }, []);\n\n  React.useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n\n\n\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if(!todo){\n      return null\n    }\n    prevTodos(todos)\n    const split = todo.split( ' ')\n    const slovo = split.filter(e=>e.indexOf('#') === 0).join('')\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      teg:slovo\n    };\n\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        debugger\n        if (editingText === ''){\n           setEditingText(todo.text)\n          return todo;\n\n        }\n        todo.text = editingText;\n        const split = todo.text.split( ' ')\n        todo.teg = split.filter(e=>e.indexOf('#') === 0).join('')\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n    setEditingText('')\n\n  }\n\n  const searchSubmit =(e)=>{\n e.preventDefault()\n    prevTodos(todos)\n    let updatedTodos = todos.filter(e=> e.teg === todo )\n      if (updatedTodos.length){\n        setTodos(updatedTodos)\n      }\n\n\n\n\n    }\n\n\n    const spanSearch= (e)=> {\n\n      setTodo(e.target.innerText)\n      searchSubmit(e)\n    }\n  function backSubmit() {\n    setTodos(todosTwo)\n  }\n\n  return (\n      <div id=\"todo-list\">\n        <h1>Заменки</h1>\n        <form >\n          <button style={{marginRight: '5px'}} onClick={backSubmit}>back</button>\n          <input\n              type=\"text\"\n              onChange={(e) => setTodo(e.target.value)}\n              value={todo}\n          />\n          <button onClick={handleSubmit}>Add Todo</button>\n          <button style={{marginLeft:\"5px\"}} onClick={searchSubmit}>Serch teg#</button>\n\n        </form>\n        {todos.map((todo) => (\n            <div key={todo.id} className=\"todo\">\n              <div className=\"todo-text\">\n                <input\n                    type=\"checkbox\"\n                    id=\"completed\"\n                    onChange={() => toggleComplete(todo.id)}\n                />\n                {todo.id === todoEditing ? (\n                    <input\n                        value={editingText?editingText:todo.text }\n                        type=\"text\"\n                        onChange={(e) =>setEditingText(e.target.value)}\n\n                    />\n                ) : (\n                    <div>{todo.text}</div>\n                )}\n              </div>\n              <div className=\"todo-actions\">\n                {todo.id === todoEditing ? (\n                    <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n                ) : (\n                    <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n                )}\n\n                <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n              </div>\n              <span onClick={spanSearch}>{todo.teg}</span>\n            </div>\n        ))}\n      </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}